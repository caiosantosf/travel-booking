{"version":3,"sources":["components/user/ResetPassword.js"],"names":["ResetPassword","props","useState","password","setPassword","message","setMessage","loading","setLoading","history","useHistory","handleResetPassword","a","passwordConfirmation","id","match","params","token","location","search","replace","api","patch","headers","res","data","error","errorHandled","errorApi","forbidden","push","className","role","style","display","htmlFor","type","maxLength","value","onChange","e","key","target","onClick","disabled","aria-hidden"],"mappings":"qLA2HeA,UAtHf,SAAuBC,GAAQ,IAAD,EACIC,mBAAS,IADb,mBACrBC,EADqB,KACXC,EADW,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGEJ,oBAAS,GAHX,mBAGrBK,EAHqB,KAGZC,EAHY,KAKxBC,EAAUC,cAERC,EAAmB,uCAAG,kCAAAC,EAAA,kEAEpBT,EAASA,WAAaA,EAASU,qBAFX,wBAGtBL,GAAW,GACLM,EAAKb,EAAMc,MAAMC,OAAOF,GACxBG,EAAQhB,EAAMiB,SAASC,OAAOC,QAAQ,UAAW,IALjC,SAMJC,IAAIC,MAAJ,qCAAwCR,GAAM,CAAE,SAAaX,EAASA,SAAU,OAAU,GAC1G,CAAEoB,QAAS,CACT,iBAAmBN,KARD,OAMhBO,EANgB,OAUtBlB,EAAW,2BAAKkB,EAAIC,MAAV,IAAgBC,OAAQ,KAClClB,GAAW,GAXW,wBAatBF,EAAW,CACTD,QAAU,8CACVqB,OAAQ,IAfY,QAkBxBtB,EAAY,IAlBY,mDAoBlBuB,EAAeC,YAAS,EAAD,KACZC,UACfpB,EAAQqB,KAAK,KAEbxB,EAAW,2BAAKqB,EAAaD,OAAnB,IAA0BA,OAAO,KAE7ClB,GAAW,GA1Ba,0DAAH,qDA8BzB,OACE,sBAAKuB,UAAU,4BAAf,UAEE,qBAAKA,UAAS,4BAAuB1B,EAAQqB,MAAQ,eAAiB,iBACjEM,KAAK,QACLC,MAAO5B,EAAQA,QAAU,CAAE6B,QAAS,SAAW,CAAEA,QAAU,QAFhE,SAGG7B,EAAQA,SAAWA,EAAQF,WAG9B,qBAAK4B,UAAU,mBAAf,SACE,2DAKF,iCACE,sBAAKA,UAAU,OAAf,UACE,uBAAOI,QAAQ,WACRJ,UAAU,aADjB,mBAIA,uBAAQK,KAAK,WACLL,UAAU,eACVjB,GAAG,WACHuB,UAAU,IACVC,MAAOnC,EAASA,UAAY,GAC5BoC,SAAU,SAACC,GACT,IAAMC,EAAMD,EAAEE,OAAOJ,MACrBlC,EAAY,2BACPD,GADM,IAETA,SAAUsC,WAMxB,sBAAKV,UAAU,OAAf,UACE,uBAAOI,QAAQ,uBACRJ,UAAU,aADjB,8BAIA,uBAAQK,KAAK,WACLL,UAAU,eACVjB,GAAG,uBACHuB,UAAU,IACVC,MAAOnC,EAASU,sBAAwB,GACxC0B,SAAU,SAACC,GACT,IAAMC,EAAMD,EAAEE,OAAOJ,MACrBlC,EAAY,2BACPD,GADM,IAETU,qBAAsB4B,WAMpC,sBAAKV,UAAU,2BAAf,UACE,yBAAQK,KAAK,SACLL,UAAU,kBACVY,QAAShC,EACTiC,SAAUrC,EAHlB,UAIE,sBAAMwB,UAAU,wCACVC,KAAK,SACLa,cAAY,OACZZ,MAAO1B,EAAU,CAAE2B,QAAS,gBAAkB,CAAEA,QAAU,UAPlE,YAWA,wBAAQE,KAAK,SACLL,UAAU,6BACVY,QAAS,WACPlC,EAAQqB,KAAK,MAHvB","file":"static/js/24.a3d72bac.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { api } from '../../config/api'\r\nimport { errorApi } from '../../config/handleErrors'\r\n\r\nfunction ResetPassword(props) {\r\n  const [password, setPassword] = useState({})\r\n  const [message, setMessage] = useState({})\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  let history = useHistory()\r\n\r\n  const handleResetPassword = async () => {\r\n    try {\r\n      if (password.password === password.passwordConfirmation) {\r\n        setLoading(true)\r\n        const id = props.match.params.id\r\n        const token = props.location.search.replace('?token=', '')\r\n        const res = await api.patch(`/users/login/resetpassword/${id}`, { 'password' : password.password, 'reset' : true }, \r\n          { headers :{\r\n            'x-access-token' : token\r\n          }})\r\n        setMessage({ ...res.data, error : false })\r\n        setLoading(false)\r\n      } else {\r\n        setMessage({\r\n          message : \"A Senha não bate com a confirmação\",\r\n          error : true\r\n        })\r\n      }\r\n      setPassword({})\r\n    } catch (error) {\r\n      const errorHandled = errorApi(error)\r\n      if (errorHandled.forbidden) {\r\n        history.push('/')\r\n      } else {\r\n        setMessage({ ...errorHandled.error, error: true })\r\n      }\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container container-login\">\r\n\r\n      <div className={`alert text-center ${message.error ? 'alert-danger' : 'alert-warning'}`}\r\n           role=\"alert\"\r\n           style={message.message ? { display: 'block'} : { display : 'none' }}>\r\n        {message.message || message.password}\r\n      </div>\r\n\r\n      <div className=\"text-center mb-3\">\r\n        <h5>\r\n          Cadastre sua nova senha\r\n        </h5>\r\n      </div>\r\n\r\n      <form>\r\n        <div className=\"mb-2\" >\r\n          <label htmlFor=\"password\" \r\n                 className=\"form-label\">\r\n            Senha\r\n          </label>\r\n          <input  type=\"password\" \r\n                  className='form-control'\r\n                  id=\"password\" \r\n                  maxLength=\"8\"\r\n                  value={password.password || ''}\r\n                  onChange={(e) => {\r\n                    const key = e.target.value\r\n                    setPassword({\r\n                      ...password,\r\n                      password: key\r\n                    })\r\n                  }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-2\" >\r\n          <label htmlFor=\"passwordConfirmation\" \r\n                 className=\"form-label\">\r\n            Confirme a Senha\r\n          </label>\r\n          <input  type=\"password\" \r\n                  className='form-control'\r\n                  id=\"passwordConfirmation\" \r\n                  maxLength=\"8\"\r\n                  value={password.passwordConfirmation || ''}\r\n                  onChange={(e) => {\r\n                    const key = e.target.value\r\n                    setPassword({\r\n                      ...password,\r\n                      passwordConfirmation: key\r\n                    })\r\n                  }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"text-center d-grid gap-2\">\r\n          <button type=\"button\" \r\n                  className=\"btn btn-primary\" \r\n                  onClick={handleResetPassword}\r\n                  disabled={loading}>\r\n            <span className=\"spinner-border spinner-border-sm mx-1\" \r\n                  role=\"status\" \r\n                  aria-hidden=\"true\"\r\n                  style={loading ? { display: 'inline-block'} : { display : 'none' }}>\r\n            </span>\r\n            Enviar\r\n          </button>\r\n          <button type=\"button\" \r\n                  className=\"btn btn-warning text-white\"\r\n                  onClick={() => {\r\n                    history.push('/')\r\n                  }}>\r\n            Voltar\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPassword\r\n"],"sourceRoot":""}